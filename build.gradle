buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
    mavenCentral()
    maven { url = "https://www.cursemaven.com" }
}

version = "${mcversion}-${version}"
group = "thecodex6824.thaumicaugmentation" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ThaumicAugmentation"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

minecraft {
    version = "${mcversion}-${forgeversion}"
    runDir = "run"
    useDepAts = true
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_39"
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    replace '@APIVERSION@', project.apiversion
    replaceIn 'ThaumicAugmentationAPI.java'
    
    replace '@VERSION@', project.version
    replaceIn 'ThaumicAugmentation.java'
    
    if (project.hasProperty('keyStore')) {
        replace '@FINGERPRINT@', project.certFingerprint
        replaceIn 'ThaumicAugmentation.java'
    }
    else {
        replace '@FINGERPRINT@', ""
        replaceIn 'ThaumicAugmentation.java'
    }
    
    clientJvmArgs += ('-Dfml.coreMods.load=thecodex6824.thaumicaugmentation.core.ThaumicAugmentationCore' + System.getProperty("line.separator"))
    serverJvmArgs += ('-Dfml.coreMods.load=thecodex6824.thaumicaugmentation.core.ThaumicAugmentationCore' + System.getProperty("line.separator"))
}

dependencies {
    deobfCompile 'curse.maven:thaumcraft-223628:2629023'
    deobfCompile 'curse.maven:baubles-227083:2518667'
    deobfCompile 'curse.maven:jeid-296289:2919737'
    deobfCompile 'curse.maven:botania-225643:2846950'
    deobfCompile 'curse.maven:auracontrol-397104:3013979'
    deobfCompile 'curse.maven:electroblobs-wizardry-265642:2929294'
    compileOnly 'net.luckperms:api:5.3'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest:2.1'
    
    runtime 'curse.maven:jei-238222:2995897'
    runtime 'curse.maven:thaumic-jei-285492:2705304'
    runtime 'curse.maven:the-one-probe-245211:2667280'
    runtime 'curse.maven:ctm-267602:2915363'
    
    // if the curse maven is down or otherwise not working:
    // comment the above "deobfCompile" and "runtime" entries
    // uncomment the following and put jars into subfolders in the "lib" folder
    
    //compile fileTree(dir: 'lib/compile', include: '*.jar')
    //runtime fileTree(dir: 'lib/runtime', include: '*.jar')
    
    // note that the first line above says compile, not deobfCompile - if you need deobf use BON2 or something
    // to avoid needing test jars, comment the "testCompile" lines and put "-x test" on the command line
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "apiversion", project.apiversion
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'forgeversion':project.forgeversion, 'forgeminversion':project.forgeminversion
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

javadoc {
    include 'thecodex6824/thaumicaugmentation/api/**'
    options.encoding = 'UTF-8'
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf { project.hasProperty('keyStore') }
    
    if (project.hasProperty('keyStore')) { // needed to skip gradle trying to find vars
        keyStore = project.keyStore
        alias = project.alias
        storePass = project.storePass
        keyPass = project.keyPass
        
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

build.dependsOn signJar

jar {
    manifest {
        attributes 'FMLAT': 'thaumicaugmentation_at.cfg'
        attributes 'FMLCorePlugin': 'thecodex6824.thaumicaugmentation.core.ThaumicAugmentationCore'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

task apiJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    classifier = 'api'
    include 'thecodex6824/thaumicaugmentation/api/**'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'sources'
}

artifacts {
    archives apiJar
    archives javadocJar
    archives sourcesJar
}

test {
    useJUnit()
    maxHeapSize = '1G'
}
